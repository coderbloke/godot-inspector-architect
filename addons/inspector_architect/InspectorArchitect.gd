@tool
class_name InspectorArchitect extends Object

enum VariantType {
	NIL = TYPE_NIL,
	BOOL = TYPE_BOOL,
	INT = TYPE_INT,
	FLOAT = TYPE_FLOAT,
	STRING = TYPE_STRING,
	VECTOR2 = TYPE_VECTOR2,
	VECTOR2I = TYPE_VECTOR2I,
	RECT2 = TYPE_RECT2,
	RECT2I = TYPE_RECT2I,
	VECTOR3 = TYPE_VECTOR3,
	VECTOR3I = TYPE_VECTOR3I,
	TRANSFORM2D = TYPE_TRANSFORM2D,
	VECTOR4 = TYPE_VECTOR4,
	VECTOR4I = TYPE_VECTOR4I,
	PLANE = TYPE_PLANE,
	QUATERNION = TYPE_QUATERNION,
	AABB = TYPE_AABB,
	BASIS = TYPE_BASIS,
	TRANSFORM3D = TYPE_TRANSFORM3D,
	PROJECTION = TYPE_PROJECTION,
	COLOR = TYPE_COLOR,
	STRING_NAME = TYPE_STRING_NAME,
	NODE_PATH = TYPE_NODE_PATH,
	RID = TYPE_RID,
	OBJECT = TYPE_OBJECT,
	CALLABLE = TYPE_CALLABLE,
	SIGNAL = TYPE_SIGNAL,
	DICTIONARY = TYPE_DICTIONARY,
	ARRAY = TYPE_ARRAY,
	PACKED_BYTE_ARRAY = TYPE_PACKED_BYTE_ARRAY,
	PACKED_INT32_ARRAY = TYPE_PACKED_INT32_ARRAY,
	PACKED_INT64_ARRAY = TYPE_PACKED_INT64_ARRAY,
	PACKED_FLOAT32_ARRAY = TYPE_PACKED_FLOAT32_ARRAY,
	PACKED_FLOAT64_ARRAY = TYPE_PACKED_FLOAT64_ARRAY,
	PACKED_STRING_ARRAY = TYPE_PACKED_STRING_ARRAY,
	PACKED_VECTOR2_ARRAY = TYPE_PACKED_VECTOR2_ARRAY,
	PACKED_VECTOR3_ARRAY = TYPE_PACKED_VECTOR3_ARRAY,
	PACKED_COLOR_ARRAY = TYPE_PACKED_COLOR_ARRAY,
	MAX = TYPE_MAX,
}

enum PropertyHint {
	NONE = PROPERTY_HINT_NONE,
	RANGE = PROPERTY_HINT_RANGE,
	ENUM = PROPERTY_HINT_ENUM,
	ENUM_SUGGESTION = PROPERTY_HINT_ENUM_SUGGESTION,
	EXP_EASING = PROPERTY_HINT_EXP_EASING,
	LINK = PROPERTY_HINT_LINK,
	FLAGS = PROPERTY_HINT_FLAGS,
	LAYERS_2D_RENDER = PROPERTY_HINT_LAYERS_2D_RENDER,
	LAYERS_2D_PHYSICS = PROPERTY_HINT_LAYERS_2D_PHYSICS,
	LAYERS_2D_NAVIGATION = PROPERTY_HINT_LAYERS_2D_NAVIGATION,
	LAYERS_3D_RENDER = PROPERTY_HINT_LAYERS_3D_RENDER,
	LAYERS_3D_PHYSICS = PROPERTY_HINT_LAYERS_3D_PHYSICS,
	LAYERS_3D_NAVIGATION = PROPERTY_HINT_LAYERS_3D_NAVIGATION,
	FILE = PROPERTY_HINT_FILE,
	DIR = PROPERTY_HINT_DIR,
	GLOBAL_FILE = PROPERTY_HINT_GLOBAL_FILE,
	GLOBAL_DIR = PROPERTY_HINT_GLOBAL_DIR,
	RESOURCE_TYPE = PROPERTY_HINT_RESOURCE_TYPE,
	MULTILINE_TEXT = PROPERTY_HINT_MULTILINE_TEXT,
	EXPRESSION = PROPERTY_HINT_EXPRESSION,
	PLACEHOLDER_TEXT = PROPERTY_HINT_PLACEHOLDER_TEXT,
	COLOR_NO_ALPHA = PROPERTY_HINT_COLOR_NO_ALPHA,
	OBJECT_ID = PROPERTY_HINT_OBJECT_ID,
	TYPE_STRING = PROPERTY_HINT_TYPE_STRING,
	NODE_PATH_TO_EDITED_NODE = PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE,
	OBJECT_TOO_BIG = PROPERTY_HINT_OBJECT_TOO_BIG,
	NODE_PATH_VALID_TYPES = PROPERTY_HINT_NODE_PATH_VALID_TYPES,
	SAVE_FILE = PROPERTY_HINT_SAVE_FILE,
	GLOBAL_SAVE_FILE = PROPERTY_HINT_GLOBAL_SAVE_FILE,
	INT_IS_OBJECTID = PROPERTY_HINT_INT_IS_OBJECTID,
	INT_IS_POINTER = PROPERTY_HINT_INT_IS_POINTER,
	ARRAY_TYPE = PROPERTY_HINT_ARRAY_TYPE,
	LOCALE_ID = PROPERTY_HINT_LOCALE_ID,
	LOCALIZABLE_STRING = PROPERTY_HINT_LOCALIZABLE_STRING,
	NODE_TYPE = PROPERTY_HINT_NODE_TYPE,
	HIDE_QUATERNION_EDIT = PROPERTY_HINT_HIDE_QUATERNION_EDIT,
	PASSWORD = PROPERTY_HINT_PASSWORD,
	MAX = PROPERTY_HINT_MAX,
}
	
enum PropertyUsageFlags {
	NONE = PROPERTY_USAGE_NONE,
	STORAGE = PROPERTY_USAGE_STORAGE,
	EDITOR = PROPERTY_USAGE_EDITOR,
	INTERNAL = PROPERTY_USAGE_INTERNAL,
	CHECKABLE = PROPERTY_USAGE_CHECKABLE,
	CHECKED = PROPERTY_USAGE_CHECKED,
	GROUP = PROPERTY_USAGE_GROUP,
	CATEGORY = PROPERTY_USAGE_CATEGORY,
	SUBGROUP = PROPERTY_USAGE_SUBGROUP,
	CLASS_IS_BITFIELD = PROPERTY_USAGE_CLASS_IS_BITFIELD,
	NO_INSTANCE_STATE = PROPERTY_USAGE_NO_INSTANCE_STATE,
	RESTART_IF_CHANGED = PROPERTY_USAGE_RESTART_IF_CHANGED,
	SCRIPT_VARIABLE = PROPERTY_USAGE_SCRIPT_VARIABLE,
	STORE_IF_NULL = PROPERTY_USAGE_STORE_IF_NULL,
	UPDATE_ALL_IF_MODIFIED = PROPERTY_USAGE_UPDATE_ALL_IF_MODIFIED,
	SCRIPT_DEFAULT_VALUE = PROPERTY_USAGE_SCRIPT_DEFAULT_VALUE,
	CLASS_IS_ENUM = PROPERTY_USAGE_CLASS_IS_ENUM,
	NIL_IS_VARIANT = PROPERTY_USAGE_NIL_IS_VARIANT,
	ARRAY = PROPERTY_USAGE_ARRAY,
	ALWAYS_DUPLICATE = PROPERTY_USAGE_ALWAYS_DUPLICATE,
	NEVER_DUPLICATE = PROPERTY_USAGE_NEVER_DUPLICATE,
	HIGH_END_GFX = PROPERTY_USAGE_HIGH_END_GFX,
	NODE_PATH_FROM_SCENE_ROOT = PROPERTY_USAGE_NODE_PATH_FROM_SCENE_ROOT,
	RESOURCE_NOT_PERSISTENT = PROPERTY_USAGE_RESOURCE_NOT_PERSISTENT,
	KEYING_INCREMENTS = PROPERTY_USAGE_KEYING_INCREMENTS,
	DEFERRED_SET_RESOURCE = PROPERTY_USAGE_DEFERRED_SET_RESOURCE,
	EDITOR_INSTANTIATE_OBJECT = PROPERTY_USAGE_EDITOR_INSTANTIATE_OBJECT,
	EDITOR_BASIC_SETTING = PROPERTY_USAGE_EDITOR_BASIC_SETTING,
	READ_ONLY = PROPERTY_USAGE_READ_ONLY,
	DEFAULT = PROPERTY_USAGE_DEFAULT,
	NO_EDITOR = PROPERTY_USAGE_NO_EDITOR,
}

static func enum_to_string(dict: Dictionary, value: int) -> String:
	var key = dict.find_key(value)
	return str(key) if key != null else str(value)

static func flags_to_string(dict: Dictionary, value: int, reverse: bool = true) -> String:
	var shifted_value := value
	var shifted_bit := 1
	var enum_values := PackedStringArray()
	for bit_index in 64:
		if shifted_value == 0:
			break
		if shifted_value & 1 == 1:
			enum_values.append(enum_to_string(dict, shifted_bit))
		shifted_value >>= 1
		shifted_bit <<= 1
	if reverse:
		enum_values.reverse()
	return " | ".join(enum_values) if enum_values.size() > 0 else enum_to_string(dict, 0)

const Utils := preload("InspectorArchitectUtils.gd")

class Types:
	
	const InspectorStructure := preload("InspectorStructure.gd")
	
	const InspectorPlugin := preload("InspectorArchitectInspectorPlugin.gd")
	
	
